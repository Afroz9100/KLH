1. Introduction
# Ditching punch cards and time sheets, let’s code our way to a smarter future! In this hands-on tutorial, we’ll build a face recognition attendance system using Python, a popular language that opens doors to both learning and real-world applications.

# Skip the advanced systems and join me as we craft our own, mastering essential Python skills along the way. Forget the inefficiency of manual methods; this project promises accuracy, convenience, and a glimpse into the future of attendance tracking. So, fire up your laptops and embark on this coding adventure – let’s build a system that’s both powerful and practical!

2. The Project Details
# Hey there! So, we worked on this cool project using OpenCV and the face-recognition library. Picture this: you’ve got two folders, one called ‘Image’ and the other ‘Records,’ plus a nifty program file called ‘attendance.py.’

# The ‘Images’ Folder. Now, the ‘Image’ folder is where the magic happens. It’s got pictures of your folks – in my case, I threw in some shots of my buddies to give you a feel. Feel free to toss in any other pics you need.

# Let’s dive into the program. It scans faces through your webcam, and if it recognizes someone, voila! It whips up a CSV file. Just once, though, no need to worry about creating a new file each day. For instance, if it spots a face on the 1st of January 2024, it’ll craft a CSV named “record_01_01_2024.csv.”

# What’s super cool is that you’re off the hook from manually creating CSV files daily. At midnight, like clockwork, a new CSV file for the next day gets generated (only if the program is running), and it kicks off a fresh recording.

# Now, inside the program, I’ve set up a different thread for reading video frames via the webcam. Why? Well, I wanted to sidestep any lag while the camera does its thing. Smart, right?

3. Requirements and Installations
# Note that, before installing the face_recognition library, it’s necessary to install two other libraries—namely, cmake and dlib.

# Create a separate folder for this Python project named “Attendance-System”.

# Establish one additional sub-directory within this folder with the title ‘Images’.

# Store the students or your friends images into the ‘Images’ folder.

# Within the main folder, declare a Python file named attendance.py.

4. Import the Modules

# Now, to make our system tailored for educational institutes, we’ll exclude certain individuals like the Head of Department, Principal, and any unknown faces. You can easily specify these exclusions by adding their names to a Python list. If anyone from this list shows up on camera, the program will skip recording their attendance.

# Here, we define a VideoStream class for handling video streams. It initializes with a specified video stream, sets the frames per second (FPS) to 60, and checks if the webcam stream is accessible. The class includes methods to start, stop, and read frames from the video stream. The actual video stream runs in a separate thread to ensure smooth operation.

5. Encode the Faces
# Let’s define a function named encode_faces that encodes facial features from images in the “./Images” directory.

# It walks through the directory, loads JPG or PNG files, extracts facial encodings, and stores them in a dictionary named encoded_data with filenames (excluding extensions) as keys. The function then returns this dictionary containing the encoded facial data.

6. Keep the Record of Attendance
# The Attendance function takes a person’s name as input and performs the following actions:

# Retrieves the current date.

# Creates a CSV file named “record_{today}.csv” in the “Records” directory if it doesn’t already exist.

# Reads the existing CSV file to check if the input name is already present; if not, it adds the name to a list called ‘names.’

# If the input name is not in the ‘names’ list, and it’s not in a predefined list of excluded names, the function appends the name and the current time to the CSV file.

# In essence, this code is managing attendance records for a given date by updating a CSV file with the names and entry times of individuals.

7. Putting it All Together
# This code is the main logic for our Project that performs real-time face recognition through the webcam feed. Here’s a brief overview:

# It starts by encoding faces using a predefined function called encode_faces() and sets up variables for face data.

# Initializes a video stream from the webcam using a multi-threaded approach for smoother performance.

# Enters a continuous loop to capture and process video frames.

# Utilizes face_recognition library to identify faces in each frame and compares them with the pre-encoded faces.

# Draws rectangles around detected faces and displays the names of recognized individuals.

# Calls the Attendance function to mark the attendance of the recognized person.

# Implements a delay for frame processing and displays the processed frame in a window.

# Allows the user to stop the program by pressing ‘q.’

# Finally, stops the video stream and closes all windows when the program is terminated.

8. Output
# See how effortlessly our face recognition system tracks attendance! Watch the video to uncover the magic behind it.
